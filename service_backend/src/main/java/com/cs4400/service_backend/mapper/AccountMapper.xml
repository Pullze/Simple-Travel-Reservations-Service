<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cs4400.service_backend.mapper.AccountMapper">
    <select id="getAllAccounts" resultType="com.cs4400.service_backend.entity.Account">
        select Email,
               First_Name,
               Last_Name,
               Pass,
               exists(select * from admins where admins.Email = accounts.Email) as admin
        from accounts;
    </select>

    <select id="check_cc_number_exist" resultType="String">
            select CcNumber from Customer where Ccnumber = #{cc_number};
    </select>

    <select id="login" resultType="com.cs4400.service_backend.vo.LoginInfo">
        select Email,
               First_Name,
               Last_Name,
               exists(select * from admins where admins.Email = #{email}) as is_admin,
               exists(select * from clients where clients.Email = #{email}) as is_client,
               exists(select * from customer where customer.Email = #{email}) as is_customer,
               exists(select * from owners where owners.Email = #{email}) as is_owner
        from accounts
        where Email = #{email} and Pass = #{passwd};
    </select>

    <select id = "check_client_exist" resultType="com.cs4400.service_backend.entity.Client">
            select * from Clients left join Accounts on Clients.Email = Accounts.Email
            where  Clients.Email = #{email} and First_Name = #{first_name} and Last_Name = #{last_name}
                    and Pass = #{password} and Phone_Number = #{phone_number};
    </select>

    <select id = "check_account_uniqueness" resultType="Client">
            select Accounts.Email, Phone_number from Accounts left join Clients on Accounts.Email = Clients.Email
            where Accounts.Email = #{email} or Phone_number = #{phone_number};
    </select>

    <select id="check_owner_exist" resultType="com.cs4400.service_backend.entity.Owner">
        select * from Owners where Email = #{owner_email};
    </select>

    <select id="check_customer_exist" resultType="com.cs4400.service_backend.entity.Customer">
        select * from Customer where Email = #{customer_email};
    </select>

    <insert id  = "register_account">
        insert into accounts (Email, First_name, Last_name, pass) values
            (#{email}, #{first_name}, #{last_name}, #{password});
    </insert>

    <insert id="register_client">
        insert  into Clients (Email, Phone_Number) values
            (#{email}, #{phone_number});
    </insert>

    <insert id="register_owner">
        insert into Owners (Email) values (#{owner_email});
    </insert>

    <insert id="register_customer">
        insert into Customer (Email, CcNumber, Cvv, Exp_Date, Location) values
        (#{customer_email}, #{cc_number}, #{cvv}, #{exp_date}, #{location});
    </insert>

    <select id="get_customer_info" resultType="com.cs4400.service_backend.vo.CustomerInfo">
        select
            concat(acc.First_Name, space(1), acc.Last_Name) as name,
            avg(rate.Score) as average_rating,
            cus.Location as location,
            case when o.Email is null then 0 else 1 end as is_owner,
            coalesce(sum(b.Num_Seats), 0) as total_seats_purchased
        from customer as cus
             left join owners_rate_customers as rate on rate.Customer = cus.Email
             left join accounts as acc on acc.Email = cus.Email
             left join book as b on b.Customer = cus.Email
             left join owners as o on o.Email = cus.Email
        group by cus.Email;
    </select>

    <select id="get_owner_info" resultType="com.cs4400.service_backend.vo.OwnerInfo">
        select
            concat(acc.First_Name, space(1), acc.Last_Name) as name,
            avg(rate.Score) as average_rating,
            count(distinct p.Property_Name) as number_of_properties_owned,
            avg(rev.Score) as average_property_rating
        from owners as o
             left join customers_rate_owners as rate on o.Email = rate.Owner_Email
             left join accounts as acc on acc.Email = o.Email
             left join property as p on o.Email = p.Owner_Email
             left join review as rev on p.Property_Name = rev.Property_Name
        group by o.Email;
    </select>

    <update id="process_date">
        update Customer left join
            (Flight as f left join Airport on To_Airport = Airport_ID
            right join Book as b
            on b.Flight_Num = f.Flight_Num and b.Airline_Name = f. Airline_Name and Was_Cancelled = 0)
        on Email = Customer
            set Location = State
        where Flight_Date = #{currentDate};
    </update>
</mapper>
