<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cs4400.service_backend.mapper.PropertyMapper">
    <select id = "viewProperties" resultType = "Property">
        select
            p.Property_Name,
            p.Owner_Email,
            p.Descr,
            AVG(r.Score) as rating,
            p.Capacity,
            p.Cost,
            concat(p.Street, ',', p.City, '，', p.State, '，', p.Zip) as address
        from property as p
                 left join review as r on p.Property_Name = r.Property_Name
        where p.Capacity >= #{low} and p.Capacity &lt;= #{high}
        group by p.Property_Name;
    </select>

    <select id = "checkAmenities" resultType = "String">
        select Amenity_Name from Amenity where Property_Name = #{property_name} and Property_Owner = #{property_owner};
    </select>

<!--check constraints: available seats > 0 -->
    <select id = "viewAvailableProperties" resultType = "Property">
        select p.Property_Name, p.Owner_Email, ifnull(p.capacity - reserved_seats, p.capacity) as capacity, p.Cost
        from property as p
            left join (select Property_name, Owner_Email, sum(Num_Guests) as reserved_Seats
                        from reserve where Was_Cancelled = 0 and Start_Date &lt;= #{end} and End_Date &gt;= #{start}
                        group by Property_name, Owner_Email) as r
            on p.Property_Name = r.Property_Name and p.Owner_Email = r.Owner_Email
        where ifnull(r.reserved_seats, 0) &lt; p.capacity;
    </select>

<!--    check the propertyName, ownerEmail, Customer unique in the system. return property for bad request. -->
    <select id = "checkReserveExist" resultType = "Reserve">
        select * from reserve
            where Property_Name = #{propertyName} and Owner_Email = #{ownerEmail} and Customer = #{customerEmail};
    </select>

    <!--    check the property reserve overlap with previous reserve for other properties. return property if overlap -->
    <select id = "checkReserveCondition" resultType = "Reserve">
        select * from reserve
        where Customer = #{customerEmail} and Was_Cancelled = 0 and
              ((Start_Date between #{startDate} and #{endDate}) or (End_Date between #{startDate} and #{endDate})
                   or (Start_Date &lt;= #{startDate} and End_Date > #{endDate}));
    </select>

    <insert id="reserveProperty">
        insert into Reserve
            (Property_Name, Owner_Email, Customer, Start_Date, End_Date, Num_Guests, Was_Cancelled)
            values (#{propertyName}, #{ownerEmail}, #{customerEmail}, #{startDate}, #{endDate}, #{numGuests}, 0);
    </insert>


    <select id = "viewCustomerFutureReservations" resultType = "com.cs4400.service_backend.vo.ReserveInfo">
        select r.Start_Date as startDate, p.Property_Name as propertyName, p.Owner_Email as ownerEmail, concat(p.Street, ', ', p.City, ', ', p.State, ', ', p.Zip) as address
        from reserve as r, property as p
        where r.Property_Name = p.Property_Name and r.Owner_Email = p.Owner_Email and r.Start_Date > #{curDate} and r.Customer = #{customerEmail} and r.Was_Cancelled = 0;
    </select>

    <select id="check_owner_has_property" resultType="Boolean">
        select exists(select * from Property where Owner_Email = #{email});
    </select>

    <update id = "cancelPropertyReservation" >
        Update Reserve Set Was_Cancelled = 1 where Property_Name = #{propertyName} and Customer = #{customerEmail} and Owner_Email = #{ownerEmail};
    </update>

    <select id = "viewCustomerPastReservations" resultType = "com.cs4400.service_backend.vo.ReserveInfo">
        select r.Start_Date as startDate, p.Property_Name as propertyName, p.Owner_Email as ownerEmail, concat(p.Street, ', ', p.City, ', ', p.State, ', ', p.Zip) as address, review.content as review, review.Score as rating
        from reserve as r left join review on r.Customer = review.Customer and r.Owner_Email = review.Owner_Email, property as p
        where r.Property_Name = p.Property_Name and r.Owner_Email = p.Owner_Email and r.Start_Date &lt;= #{curDate} and r.Customer = #{customerEmail} and r.Was_Cancelled = 0;
    </select>

    <select id = "viewOwnersToRate" resultType = "com.cs4400.service_backend.vo.ReserveInfo">
        select r.Start_Date as startDate, p.Property_Name as propertyName, p.Owner_Email as ownerEmail, concat(p.Street, ', ', p.City, ', ', p.State, ', ', p.Zip) as address, rate.Score as rating
        from reserve as r left join customers_rate_owners as rate on r.Customer = rate.Customer and r.Owner_Email = rate.Owner_Email, property as p
        where r.Property_Name = p.Property_Name and r.Owner_Email = p.Owner_Email and r.Start_Date &lt;= #{curDate} and r.Customer = #{customerEmail} and r.Was_Cancelled = 0;
    </select>

    <select id = "viewCustomersToRate" resultType = "ReserveInfo">
        select r.Start_Date as startDate, p.Property_Name as propertyName, r.Customer as customerEmail, concat(p.Street, ', ', p.City, ', ', p.State, ', ', p.Zip) as address, rate.Score as rating
        from Reserve as r left join  Owners_Rate_Customers as rate on r.Customer = rate.Customer and r.Owner_Email = rate.Owner_Email
        left join property as p on r.Property_Name = p.Property_Name and r.Owner_Email = p.Owner_Email
        where  r.Start_Date &lt;= #{curDate} and r.Owner_Email = #{ownerEmail} and r.Was_Cancelled = 0;
    </select>

    <update id = "reviewReservation" >
        insert into review (Property_Name, Owner_Email, Customer, Content, Score) values
            (#{propertyName}, #{ownerEmail}, #{customerEmail}, #{content}, #{score});
    </update>

    <update id = "customerRateOwner" >
        insert into Customers_Rate_Owners (Customer, Owner_Email, Score) VALUES
            (#{customerEmail}, #{ownerEmail}, #{score});
    </update>

    <update id = "ownerRateCustomer" >
        insert into Owners_Rate_Customers (Customer, Owner_Email, Score) VALUES
            (#{customerEmail}, #{ownerEmail}, #{score});
    </update>

    <select id = "viewPropertyReservations" resultType = "com.cs4400.service_backend.vo.ReserveInfo">
        select
            p.Property_Name as propertyName,
            p.Owner_Email as ownerEmail,
            res.Start_Date as startDate,
            res.End_Date as endDate,
            res.Customer as customerEmail,
            cli.Phone_Number as customerPhone,
            p.Cost  * (1 - (0.8  * (res.Was_Cancelled))) * (res.End_Date - res.Start_Date + 1) as cost,
            rev.Score as rating,
            rev.Content as review
        from reserve as res
                 left join clients as cli on res.Customer = cli.Email
                 left join property as p on (p.Property_Name, p.Owner_Email)
                                                = (res.Property_Name, res.Owner_Email)
                 left join review as rev on (p.Property_Name, p.Owner_Email, cli.Email)
                                                = (rev.Property_Name, rev.Owner_Email, rev.Customer)
        group by p.Property_Name, res.Was_Cancelled, res.Customer;
    </select>

    <select id = "checkAddressExist" parameterType = "PropertyInfo" resultType = "Property">
        select * from Property where concat(Street, ',', City, ',', State, ',', Zip) = #{address};
    </select>

    <select id = "checkNameExist" parameterType = "PropertyInfo" resultType = "Property">
        select * from Property where Property_Name = #{property_name} and Owner_Email = #{owner_email};
    </select>

    <select id = "checkPropertyExist" resultType = "PropertyInfo">
        select * from Property where Property_Name = #{propertyName} and Owner_Email = #{ownerEmail};
    </select>

    <insert id = "addProperty" parameterType = "PropertyInfo">
        insert into Property(Property_Name, Owner_Email, Descr, Capacity, Cost, Street, City, State, Zip)
        values (#{property_name}, #{owner_email}, #{descr}, #{capacity}, #{cost}, #{street}, #{city}, #{state}, #{zip});
    </insert>

    <insert id = "addCloseAirport">
        insert into Is_Close_To(property_name, owner_email, airport, distance)
        values (#{propertyName}, #{ownerEmail}, #{airportId}, #{distance});
    </insert>

    <select id = "viewAllProperties" resultType = "Property">
        select p.Property_Name as property_name, p.Descr as descr, p.Capacity as capacity, p.Cost as cost, concat(p.Street, ', ', p.City, ', ', p.State, ', ', p.Zip) as address
               from Property as p where Owner_Email = #{ownerEmail};
    </select>

    <select id = "checkIfReserved" resultType = "Property">
        select p.Property_Name from Property as p natural join Reserve as r where p.Property_Name = #{propertyName} and p.Owner_Email = #{ownerEmail} and #{currentDate} between Start_Date and End_Date and Was_Cancelled = 0;
    </select>

    <update id = "removePropertyFromReserve" >
        delete from Reserve where Property_Name = #{propertyName} and Owner_Email = #{ownerEmail};
    </update>

    <update id = "removePropertyFromReview" >
        delete from Review where Property_Name = #{propertyName} and Owner_Email = #{ownerEmail};
    </update>

    <update id = "removePropertyFromAmenity" >
        delete from Amenity where Property_Name = #{propertyName} and Property_Owner = #{ownerEmail};
    </update>

    <update id = "removePropertyFromIsCloseTo" >
        delete from Is_Close_To where Property_Name = #{propertyName} and Owner_Email = #{ownerEmail};
    </update>

    <update id = "removeProperty" >
        delete from Property where Property_Name = #{propertyName} and Owner_Email = #{ownerEmail};
    </update>

</mapper>
