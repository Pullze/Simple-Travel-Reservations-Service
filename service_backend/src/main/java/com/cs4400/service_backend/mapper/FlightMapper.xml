<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cs4400.service_backend.mapper.FlightMapper">
    <select id = "check_flight" resultType = "FlightInfo">
        select  * from Flight
            where Flight_Num = #{flight_num} and Airline_Name = #{airline_name};
    </select>

    <insert id = "schedule_flight">
    insert into Flight (Flight_Num, Airline_Name, From_Airport, To_Airport, Departure_Time,  Arrival_Time, Flight_Date,
                        Cost, Capacity)
    values (#{flight_num}, #{airline_name}, #{from_airport}, #{to_airport}, #{departure_time}, #{arrival_time},
             #{flight_date}, #{cost}, #{capacity});
    </insert>

    <select id = "customer_view_flight" resultType= "Flight">
        select
        f.Flight_Num,
        f.Airline_Name,
        Departure_Time,
        Arrival_Time,
		Flight_Date,
		Cost,
        From_Airport,
        To_Airport,
        Capacity - coalesce(SUM(b.Num_Seats * (1 - b.Was_Cancelled)), 0) as remaining_seats
		from flight as f left join book as b on
        b.Airline_Name = f.Airline_Name and b.Flight_Num = f.Flight_Num
        where Flight_Date > #{currentDate}
		group by f.Airline_Name , f.Flight_Num
		having remaining_seats >= #{minSeats};
    </select>

    <select id = "check_flight_seats" resultType = "Integer">
        select Capacity - coalesce(sum(b.Num_seats),0) as remaining_seats
        from Book as b right join Flight as f on
            b.Flight_Num = f.Flight_Num and b.Airline_Name = f.Airline_Name and Was_Cancelled = 0
        where f.Flight_Num = #{flight_num} and f.Airline_Name = #{airline_name}
        group by f.Flight_Num;
    </select>

    <select id="get_flight_info" resultType="com.cs4400.service_backend.vo.ViewFlightInfo">
        select
               flight_id as flight_id,
               Flight_Date as flight_date,
               airline as airline,
               From_Airport as "from",
               To_Airport as "to",
               Departure_Time as departure_time,
               Arrival_Time as arrival_time,
               Cost as seat_cost,
               Capacity - booked_seats as num_empty_seats,
               Cost * charged_seats as total_spent
        from
             (
                 select f.Flight_Num as flight_id,
                        Flight_Date,
                        f.Airline_Name as airline,
                        From_Airport,
                        To_Airport,
                        Departure_Time,
                        Arrival_Time,
                        Cost,
                        Capacity,
                        coalesce(SUM(b.Num_Seats * (1 - b.Was_Cancelled)), 0) as booked_seats,
                        coalesce(SUM(b.Num_Seats * (1 - 0.8 * b.Was_Cancelled)), 0) as charged_seats
                 from flight as f left join book as b on
                     b.Airline_Name = f.Airline_Name and b.Flight_Num = f.Flight_Num
                 group by f.Airline_Name , f.Flight_Num

             ) as temp;
    </select>

    <select id="check_if_future_flight" resultType="Boolean">
        select exists(
            select *
            from Flight
            where Flight_Num = #{flight_num}
              and #{airline_name} = Airline_Name
              and #{current_date} &lt; Flight_Date
           )
    </select>



    <delete id="remove_flight">
        delete from Flight where flight.Flight_Num = #{flight_num} and flight.Airline_Name = #{airline_name};
    </delete>

    <select id="view_remove_flight" resultType="RemoveFlightInfo">
        select Airline_Name as airline_name,
               Flight_Num as flight_number,
               Flight_Date as "date"
        from flight
            <where>
                <if test="(start_date in {null, ''}) and (end_date not in {null, ''})">
                    Flight_Date &lt;= #{end_date}
                </if>
                <if test="(start_date not in {null, ''}) and (end_date in {null, ''})">
                    Flight_Date &gt;= #{start_date}
                </if>
                <if test="(start_date not in {null, ''}) and (end_date not in {null, ''})">
                    Flight_Date &lt;= #{end_date} and Flight_Date &gt;= #{start_date}
                </if>
                <if test="airline_name != null and airline_name != ''">
                    and Airline_Name = #{airline_name}
                </if>
                <if test="flight_num != null and flight_num != ''">
                    and Flight_Num = #{flight_num}
                </if>
            </where>
    </select>


</mapper>
